;; Configuration layers
;; --------------------

(defun dotspacemacs/layers ()
  (setq-default

   ;; If non-nil then Spacelpa repository is the primary source to install
   ;; a locked version of packages. If nil then Spacemacs will install the lastest
   ;; version of packages from MELPA. (default nil)
   dotspacemacs-use-spacelpa nil

   dotspacemacs-auto-resume-layouts nil
   dotspacemacs-delete-orphan-packages t
   dotspacemacs-distribution 'spacemacs

   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation nil

   dotspacemacs-configuration-layers

   '(toml
     docker
     github-copilot
     (tree-sitter :variables
                  spacemacs-tree-sitter-hl-black-list '(js2-mode rjsx-mode)
                  tree-sitter-syntax-highlight-enable t
                  tree-sitter-fold-enable t
                  tree-sitter-fold-indicators-enable nil)

     (llm-client :variables
                 gptel-default-mode 'org-mode
                 llm-client-enable-gptel t)
     sql
     (spacemacs-layouts
      :variables
      spacemacs-layouts-restrict-spc-tab t
      persp-autokill-buffer-on-remove t)
     terraform

     ;; (elfeed :variables
     ;;         rmh-elfeed-org-files (list "~/notes/main-elfeed.org")
     ;;         elfeed-enable-web-interface t
     ;;         )
     (clojure :variables
              clojure-backend 'cider
              clojure-enable-clj-refactor t
              clojure-enable-linters 'clj-kondo
              clojure-enable-fancify-symbols t
              clojure-backend 'cider)
     ;; (rust :variables rust-format-on-save t)
     (deft :variables deft-extensions '("org" "md" "txt"))
     (ivy :variables
          ivy-enable-advanced-buffer-information t
          ivy-enable-icons nil)
     nixos
     helpful
     ;; semantic
     neotree
     ;; csv
     graphviz
     ;; (go :variables
     ;;     go-backend 'lsp
     ;;     ;; go-backend 'go-mode
     ;;     go-format-before-save t
     ;;     go-tab-width 4
     ;;   )
     (auto-completion :variables
                      company-minimum-prefix-length 1
                      company-idle-delay 0.8
                      company-quickhelp-delay 0.8
                      auto-completion-minimum-prefix-length 1
                      auto-completion-enable-help-tooltip t
                      auto-completion-return-key-behavior 'complete
                      auto-completion-private-snippets-directory nil
                      auto-completion-enable-snippets-in-popup t
                      auto-completion-tab-key-behavior 'cycle
                      auto-completion-complete-with-key-sequence-delay 0.1
                      :disabled-for org)
     ;; It slows down the navigation in the buffer
     ;; https://github.com/turnspike/spacemacs-spaceline
     ;; (spacemacs-spaceline :location local)

     emacs-lisp
     (git :variables
          ;; tell Magit to only automatically refresh the current Magit buffer,
          ;; but not the status buffer. If you do that, then the status buffer is only
          ;; refreshed automatically if it is the current buffer.
          ;; https://magit.vc/manual/magit/Performance.html#Performance
          magit-diff-highlight-indentation nil
          magit-diff-highlight-trailing nil
          magit-diff-highlight-hunk-body nil
          magit-diff-refine-hunk nil
          magit-refresh-status-buffer t
          ;; start with cursor on head section
          magit-status-initial-section nil
          ;; to see only 2-panes in the diff-window instead of 3
          magit-ediff-dwim-show-on-hunks t
          ;; to see the diff by words not whole lines
          magit-diff-refine-hunk nil
          )
     ;; gtags
     html
     (lsp :variables
          ;; https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/
          lsp-headerline-breadcrumb-enable t
          lsp-enable-file-watchers nil
          lsp-enable-symbol-highlighting t
          lsp-ui-doc-enable t
          lsp-navigation 'peek
          lsp-modeline-code-actions-enable t
          lsp-modeline-diagnostics-enable nil
          lsp-modeline-code-actions-segments t
          lsp-use-lsp-ui t
          lsp-lens-enable t
          lsp-auto-guess-root t
          lsp-log-io nil
          lsp-restart 'auto-restart
          lsp-keep-workspace-alive t
          lsp-enable-on-type-formatting nil
          lsp-signature-auto-activate nil
          lsp-signature-render-documentation nil
          lsp-eldoc-hook nil
          lsp-semantic-tokens-enable nil
          lsp-enable-folding nil
          lsp-disabled-clients '(semgrep-ls)
          ;; (https://github.com/emacs-lsp/lsp-pyright/issues/69#issuecomment-1432999642)
          read-process-output-max (* 1024 1024) ;; 1MB
          lsp-idle-delay 1.5
          )
     (markdown :variables
               markdown-live-preview-engine 'vmd)
     ;; (dart :variables
     ;;   dart-backend 'lsp
     ;;   lsp-enable-on-type-formatting t
     ;;   lsp-dart-sdk-dir (expand-file-name "~/proj/flutter/bin/cache/dart-sdk/")
     ;; )
     ;; nginx
     (org :variables
          ;; Select headings up 10 level as candiates for org-refile command. It applies to all the headings in the same file.
          org-refile-targets '((nil :maxlevel . 10))
          org-download-method 'attach
          org-download-timestamp t
          org-enable-bootstrap-support t
          org-startup-indented t
          org-hide-emphasis-markers t
          org-cycle-separator-lines -2
          org-fontify-whole-heading-lines t
          org-blank-before-new-entry '(
                                       (heading . nil)
                                       (plain-list-item . nil))
          org-export-babel-evaluate nil
          org-src-preserve-indentation t
          org-log-done (quote time)
          org-log-into-drawer t
          org-log-state-notes-insert-after-drawers nil
          org-hide-emphasis-markers t
          ;; Syntax highlighting in #+BEGIN_SRC blocks
          org-src-fontify-natively t
          ;; Don't prompt before running code in org
          org-confirm-babel-evaluate nil
          org-todo-keywords
          '((sequence "TODO(t)" "ONIT(o)" "WAITING(w@)" "REVIEW(r@)" "|" "DONE(d@)")
            (sequence "|" "CANCELED(c)"))
          org-capture-templates
          '(("t" "Todo" entry (file+headline "~/gsync-docs/today.org" "Tasks")
             "* TODO %?\nEntered on %U\n  %i")
            ("w" "Work Journal" entry (file+datetree "~/Documents/work.org")
             "* %?\nEntered on %U\n  %i")
            ("W" "Work todo" entry (file+headline "~/Documents/work.org" "Tasks")
             "* TODO %?\nEntered on %U\n  %i")
            ("j" "Journal" entry (file+datetree "~/gsync-docs/today.org")
             "* %?\nEntered on %U\n  %i"))
          )
     ;; ocaml

     (osx :variables
          mac-system-move-file-to-trash-use-finder nil)

     ;; dap
     (python :variables
             lsp-python-ms-python-executable "python3"
             python-interpreter "python3"
             python-shell-interpreter "python3"
             ;; no need to guess identation
             python-indent-guess-indent-offset t
             python-guess-indent nil
             python-backend 'anaconda
             ;; python-lsp-server 'pyright
             lsp-pyright-multi-root nil
             python-fill-docstring-style 'pep-257-nn
             python-fill-column 88
             python-test-runner 'pytest
             python-format-on-save t
             python-formatter 'black
             python-auto-set-local-pyvenv-virtualenv 'on-project-switch
             python-indent-offset 4
             lsp-enable-snippet t
             lsp-prefer-flymake nil
             )
     (shell :variables
            shell-default-height 48
            shell-default-position 'bottom
            shell-default-term-shell "bash"
            ;; shell-default-shell 'vterm
            )
     (spell-checking :variables
                     spell-checking-enable-auto-dictionary nil
                     enable-flyspell-auto-completion nil
                     spell-checking-enable-by-default nil
                     ;; ispell-program-name "aspell"
                     ;; ispell-dictionary "british"
                     )
     restclient
     react
     (typescript :variables
                 typescript-linter 'tslint
                 typescript-fmt-tool 'prettier
                 typescript-fmt-on-save t
                 ;; typescript-backend 'tide
                 typescript-backend 'lsp
                 typescript-indent-level 4
                 )
     (java :variables java-backend 'lsp
           lsp-enable-indentation t
           lsp-java-import-maven-enabled t
           lsp-java-maven-download-sources t
           lsp-java-boot-lens-mode t
           lsp-java-vmargs
           (list "-Xms1000m"
                 "-noverify"
                 "--enable-preview"
                 "-Dlog.protocol=true"
                 "-Dlog.level=DEBUG"
                 "-Xmx4G"
                 "-XX:+UnlockExperimentalVMOptions"
                 "-XX:+UseZGC"
                 "-XX:+UseStringDeduplication"
                 "-XX:AdaptiveSizePolicyWeight=90"
                 "-Dsun.zip.disableMemoryMapping=true"
                 (format "-javaagent:%s/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.22//9c08ea24c6eb714e2d6170e8122c069a0ba9aacf/lombok-1.18.22.jar" (expand-file-name "~"))
                 ;; (format "-Xbootclasspath/a:%s/.gradle/caches/modules-2/files-2.1/org.projectlombok/lombok/1.18.24/13a394eed5c4f9efb2a6d956e2086f1d81e857d9/lombok-1.18.24.jar" (expand-file-name "~"))
                 )
           )
     (javascript :variables
                 javascript-backend 'tide
                 javascript-lsp-linter nil
                 javascript-fmt-tool 'prettier
                 javascript-repl 'nodejs)

     ;; (version-control :variables
     ;;                  ;; diff-hl is slow
     ;;                  ;; version-control-diff-tool 'diff-hl
     ;;                  git-magit-status-fullscreen t)
     yaml
     )
   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and uninstall any
   ;; unused packages as well as their unused dependencies.
   ;; `used-but-keep-unused' installs only the used packages but won't uninstall
   ;; them if they become unused. `all' installs *all* packages supported by
   ;; Spacemacs and never uninstall them. (default is `used-only')
   dotspacemacs-install-packages 'used-but-keep-unused
   dotspacemacs-additional-packages `(
                                      hyperbole
                                      ;; good for usage with kitty (M-S-: works now)
                                      naysayer-theme
                                      eclipse-theme
                                      dakrone-light-theme
                                      kkp
                                      multi-web-mode
                                      atomic-chrome
                                      dumber-jump
                                      highlight-indent-guides
                                      edit-server
                                      nerd-icons
                                      org-ai
                                      reformatter
                                      direnv
                                      blacken
                                      igist
                                      molokai-theme

                                      ;; to fix the editor issue when commiting
                                      ;; git-commit

                                      ;; call all-the-icons-install-fonts to install the fonts on the system
                                      ;; all-the-icons

                                      ;; not used in favour of 'uv'
                                      ;; poetry
                                      ;; protobuf-mode
                                      ;; eval-sexp-fu
                                      virtualenvwrapper
                                      ob-restclient
                                      ob-graphql
                                      ;; allows to not block on org source-block
                                      ;; execution
                                      ob-async
                                      ;; reverso - not used
                                      ;; writegood-mode requires configuration
                                      ;; powerthesaurus - not used
                                      ;; run tests in TS and TSX
                                      jest-test-mode
                                      ;; access clipboard in OSX
                                      pbcopy
                                      ;; (robot-framework :location (recipe
                                      ;;                     :fetcher github
                                      ;;                     :repo "dalanicolai/robot-framework-layer"))
                                      )
   dotspacemacs-excluded-packages `(
                                    ;; ignore temporarely as it cannot be loaded
                                    plz-media-type
                                    json-navigator
                                    ;; ;; use highlight-indent-guides instead
                                    ;; highlight-indentation
                                    ;; inspector
                                    ;; importmagic
                                    ;; auto-highlight-symbol
                                    ;; org-plus-contrib
                                    ;; evil-search-highlight-persist
                                    ;; eval-sexp-fu
                                    ;; info+
                                    ;; ;; smooth-scrolling
                                    ;; rainbow-delimiters
                                    ;; ;; not needed functionality
                                    ;; pip-requirements
                                    ;; pippel

                                    ;; ;; I don't really need them
                                    ;; define-word
                                    ;; fancy-battery

                                    ;; ;; git-gutter
                                    ;; git-gutter+
                                    ;; git-gutter-fringe
                                    ;; git-gutter-fringe+

                                    ;; ;; https://github.com/syl20bnr/spacemacs/issues/9124
                                    ;; ;; it's not possible to change the compile buffer position
                                    ;; ;; and it works perfect now with pytest compilation window
                                    ;; window-purpose
                                    ;; ;; not using it
                                    ;; forge
                                    )
   ) ;; setq
  )

(defun dotspacemacs/init ()
  "Initialization function.
  This function is called at the very startup of Spacemacs initialization
  before layers configuration."

  (setq-default
   spacemacs-theme-comment-italic t
   spacemacs-theme-keyword-italic t
   dotspacemacs-folding-method 'origami
   dotspacemacs-mode-line-theme 'doom
   dotspacemacs-mode-line-unicode-symbols t
   dotspacemacs-highlight-delimiters 'nil

   display-line-numbers-width 1
   dotspacemacs-line-numbers '(
                               :relative nil
                               :visual t
                               :enabled-for-modes python-mode typescript-mode markdown-mode org-mode typescript-tsx-mode
                               :size-limit-kb 1000)


   ;; True if the home buffer should respond to resize events. (default t)
   dotspacemacs-startup-buffer-responsive t

   ;; exec-path-from-shell-arguments '("-l")
   dotspacemacs-elpa-https t
   dotspacemacs-elpa-timeout 5
   ;; If non nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. (default t)
	 dotspacemacs-check-for-update nil
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil

   dotspacemacs-themes (if (display-graphic-p)
                           '(naysayer eclipse spacemacs-light)
                         '(naysayer eclipse molokai leuven wheatgrass tango))

   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache

   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5

   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1

   ;; dotspacemacs-default-font '("Go Mono" :size 14)
   ;; dotspacemacs-default-font '("Inconsolata" :size 16)
   ;; dotspacemacs-default-font '("Cascadia Code Light" :size 12)
   dotspacemacs-default-font '("Fira Code" :size 12)
   dotspacemacs-leader-key ","
   dotspacemacs-emacs-leader-key "M-m"
   dotspacemacs-major-mode-leader-key "SPC"
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"

   dotspacemacs-command-key ":"
   dotspacemacs-remap-Y-to-y$ t
   dotspacemacs-use-ido nil

   history-delete-duplicates t


   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4

   ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil

   ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t
   truncate-lines -1

   dotspacemacs-search-tools '("rg" "ag" "grep")

   ;; Format specification for setting the frame title.
   ;; %a - the `abbreviated-file-name', or `buffer-name'
   ;; %t - `projectile-project-name'
   ;; %I - `invocation-name'
   ;; %S - `system-name'
   ;; %U - contents of $USER
   ;; %b - buffer name
   ;; %f - visited file name
   ;; %F - frame name
   ;; %s - process status
   ;; %p - percent of buffer above top of window, or Top, Bot or All
   ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
   ;; %m - mode name
   ;; %n - Narrow if appropriate
   ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
   ;; %Z - like %z, but including the end-of-line format
   ;; (default "%I@%S")
   dotspacemacs-frame-title-format "%b @ %t"
   ))

(defun dotspacemacs/user-init ()
  ;; just in case if custom theme is added
  (add-to-list 'custom-theme-load-path "~/.emacs.d/private/local/")
  (setq-default
   spell-checking-enable-by-default nil
   ;; Increase minimum severity level for displaying the warning buffer.
   ;; It's an alternative way to supress warnings buffer to disabling warnings and errors from
   ;; asynchronous native compilation.
   ;; native-comp-async-report-warnings-errors nil
   ;; See https://www.reddit.com/r/emacs/comments/l42oep/suppress_nativecomp_warnings_buffer/
   warning-minimum-level :error

   ;; Increase space between the lines
   line-spacing 7
   ;; Miscellaneous
   require-final-newline t
   x-select-enable-clipboard t

   undo-tree-auto-save-history nil

   ;; Backups
   backup-directory-alist `((".*" . ,temporary-file-directory))
   auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
   backup-by-copying nil
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   make-backup-files nil

   ;; Evil
   evil-shift-round nil
   evil-want-C-i-jump nil
   ;; do not put replaced text in clipboard
   evil-kill-on-visual-paste nil

   ;; Whitespace mode
   whitespace-style '(face tabs tab-mark newline-mark)
   whitespace-display-mappings
   '((newline-mark 10 [172 10])
     (tab-mark 9 [9655 9]))

   ;; Wait 0.5seconds before automatically highlitghting
   ahs-idle-interval 0.5

   ;; Avy
   avy-all-windows 'all-frames

   ;; Flycheck
   flycheck-check-syntax-automatically '(save mode-enabled)
   ;; simple mode line
   mode-line-format (list
                     ;; %p     percent of buffer above top of window
                     "%p > "
                     ;; position line:column
                     "%l:%c > "
                     ;; buffer name
                     "[ %b ] "
                     ;; name of major mode
                     "%m| "
                     ;; buffer size - auto-scaled
                     "size %I |"
                     "%-"
                     )

   ))

(defun dotspacemacs/user-config ()
  "Configuration function.
  This function is called at the very end of Spacemacs initialization after
  layers configuration."
  ;; ;; function from pbcopy package to manage clipboard when running in Terminal
  ;; (if (and (spacemacs/system-is-mac) (not (display-graphic-p)))
  ;;     (turn-on-pbcopy))

  (setq editorconfig-exclude-modes '(org-mode))

  (setq show-paren-style 'expression)

  ;; configure denote
  (setq
   denote-directory (expand-file-name "~/notes")
   denote-known-keywords '("emacs" "denote" "testing")
   )

  ;; Ghost text
  (setq atomic-chrome-url-major-mode-alist
        '(("github\\.com" . gfm-mode)
          ("hackerrank\\.com" . python-mode)
          ("leetcode\\.com" . python-mode)
          ("redmine" . textile-mode)))

  ;; org-ai
  (setq org-ai-default-chat-model "gpt-4o-mini")

  ;; (let* ((variable-tuple (cond ((x-list-fonts "Monaco") '(:font "Monaco"))
  ;;                              ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
  ;;                              ((x-list-fonts "Verdana")         '(:font "Verdana"))
  ;;                              ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
  ;;                              (nil (warn "Cannot find Monaco.  Install Monaco."))))
  ;;        (base-font-color     (face-foreground 'default nil 'default))
  ;;        (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

  ;;    (custom-theme-set-faces 'user
  ;;                            `(org-level-8 ((t (,@headline ,@variable-tuple))))
  ;;                            `(org-level-7 ((t (,@headline ,@variable-tuple))))
  ;;                            `(org-level-6 ((t (,@headline ,@variable-tuple))))
  ;;                            `(org-level-5 ((t (,@headline ,@variable-tuple))))
  ;;                            `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
  ;;                            `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
  ;;                            `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
  ;;                            `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
  ;;                            `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))

  (custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-link ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))

  ;; --------- copilot
  ;; accept completion from copilot and fallback to company
  (with-eval-after-load 'company
    ;; disable inline previews
    (delq 'company-preview-if-just-one-frontend company-frontends))
  (with-eval-after-load 'copilot
    (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
    (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)
    (define-key copilot-completion-map (kbd "C-TAB") 'copilot-accept-completion-by-word)
    (define-key copilot-completion-map (kbd "C-<tab>") 'copilot-accept-completion-by-word))

  (add-hook 'prog-mode-hook 'electric-pair-mode 'copilot-mode)

  (direnv-mode)
  (config-visuals)

  ;; scrolling configuration
  (setq
   scroll-conservatively 101
   scroll-preserve-screen-position t
   maximum-scroll-margin 0.5
   scroll-margin 10
   truncate-partial-width-windows nil
   )

  ;; https://github.com/emacsorphanage/popwin
  (push '(compilation-mode :noselect t :position bottom) popwin:special-display-config)

  (setq use-dialog-box nil)
  (setq sp/deft/dir-list '("~/notes"))

  (setq deft-directory "~/notes")
  ;; pytest
  ;; (add-to-list 'pytest-project-root-files "pyproject.toml")

  ;; (add-to-list 'spacemacs-default-jump-handlers 'dumb-jump-go)
  ;; (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  (add-hook 'xref-backend-functions #'dumber-jump-xref-activate)

  ;; hugo
  ;; note: tailing slash is important
  (setq easy-hugo-basedir "~/proj/signalpillar.github.io/")
  (setq easy-hugo-url "https://signalpillar.github.io")
  (setq easy-hugo-postdir "content/posts")


  ;; for any theme I wan to be able to see the borders of the windows.
  (set-frame-parameter (selected-frame) 'internal-border-width 15)

  ;; [[https://github.com/gboncoffee/emacs][gboncoffee/emacs: My Emacs configuration]]
  (set-frame-parameter (selected-frame) 'alpha-background 90)
  (add-to-list 'default-frame-alist '(alpha-background . 90))

  (fset 'evil-visual-update-x-selection 'ignore)

  ;; Neotree
  (with-eval-after-load 'neotree
    (add-to-list 'neo-hidden-regexp-list "TAGS$")
    (add-to-list 'neo-hidden-regexp-list "__pycache__")
    )
  ;; Enable custom neotree theme
  (require 'nerd-icons)
  (setq nerd-icons-font-family "JetBrainsMono Nerd Font")
  (setq neo-theme 'nerd-icons)
  (evil-leader/set-key "of" 'neotree-find)

  (defun jao-toggle-selective-display ()
    (interactive)
    (set-selective-display (if selective-display nil 1)))

  (global-set-key [f3] 'jao-toggle-selective-display)
  (global-set-key [f4] 'sp/tox/activate-current-project-tox-env)
  (global-set-key [f5] 'sp/org-insert-clipboard-image)
  (global-set-key [f6] 'sp/insert-fortune-cookie)
  (global-set-key [f2] 'sp/org/add-note-to-last-clocked)
  ;; candidate for ,a(pplication)s(end)r(egion)
  ;; C-r C-r doesn't work in org-mode
  (spacemacs/set-leader-keys "xsr" 'tws-region-to-process)

  (defun os-open (path &optional link)
    "Open the path with OS specific command"
    (shell-command (format "open %s" path)))

  ;; (add-to-list 'org-file-apps '("\\.jpeg\\'" . os-open))

  ;; measured in bytes
  ;; https://www.reddit.com/r/emacs/comments/yzb77m/an_easy_trick_i_found_to_improve_emacs_startup/
  ;; (defun config:defer-gc ()
  ;;   (setq gc-cons-threshold most-positive-fixnum))
  ;; (defun config:-do-restore-gc ()
  ;;   (setq gc-cons-threshold 16777216))
  ;; (defun config:restore-gc ()
  ;;   (run-at-time 1 nil #'config:-do-restore-gc))

  (add-hook 'minibuffer-setup #'config:defer-gc)
  (add-hook 'minibuffer-exit #'config:restore-gc)

  ;; tmpdir --------
  (defconst emacs-tmp-dir (expand-file-name (format "emacs%d" (user-uid)) temporary-file-directory))
  (setq backup-directory-alist
        `((".*" . ,emacs-tmp-dir)))
  (setq auto-save-file-name-transforms
        `((".*" ,emacs-tmp-dir t)))
  (setq auto-save-list-file-prefix
        emacs-tmp-dir)
  ;; tmpdir --------

  (setq-default
   powerline-default-separator 'alternate
   guide-key/popup-window-position :right
   )

  (set-fill-column 100)
  (global-set-key (kbd "C-=") 'zoom-frm-in)
  (global-set-key (kbd "C--") 'zoom-frm-out)
  (setq clojure-enable-fancify-symbols t)

  ;; disable additional bindings so they aren't bound when the package loads
  ;; https://github.com/emacs-evil/evil-cleverparens/issues/58#issuecomment-717412151
  (setq evil-cleverparens-use-additional-bindings nil)

  (setq flycheck-display-errors-function 'flycheck-display-error-messages-unless-error-list)

  ;; lisp
  (add-hook 'clojure-mode 'electric-pair-mode)
  (add-hook 'clojure-mode 'rainbow-delimiters-mode)
  ;; (spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hooks)

  ;; Miscellaneous
  (add-hook 'text-mode-hook 'auto-fill-mode)
  (add-hook 'makefile-mode-hook 'whitespace-mode)

  ;; (add-hook 'python-mode-hook 'flycheck-mode)
  (add-hook 'python-mode-hook 'flyspell-prog-mode)
  (add-hook 'python-mode-hook 'electric-pair-mode)
  (add-hook 'python-mode-hook 'auto-fill-mode)
  (add-hook 'python-mode-hook 'blacken-mode)
  (add-hook 'python-mode-hook #'(lambda () (modify-syntax-entry ?_ "w")))

  (add-hook 'live-py-mode-hook (lambda ()
                                 (progn
                                   (setq-default live-py-version (executable-find "python"))
                                   (live-py-update-all))))
  ;; [A trick to speed up projectile-find-file in a large monorepo - Emacs TIL](https://emacstil.com/til/2022/10/01/a-trick-to-speed-up-projectilefindfile-in-a-large-monorepo/)
  (setq projectile-indexing-method 'alien)
  (setq projectile-enable-caching t)
  (setq
   ;; For example, project-find-file uses 'project-files which uses
   ;; substring completion by default. Set to nil to make sure it's using
   ;; flx.
   completion-category-defaults nil
   completion-category-overrides nil
   )

  ;; .envrc files are setting now PYTHONPATH
  ;; (advice-add 'pyenv-mode-set
  ;;             :after
  ;;             (lambda (_) (setenv "PYTHONPATH" (format "%s/src" (projectile-project-root))))
  ;;             )

  ;; Org attachment ID & path
  ;; [Org ID, Org Attach & Better Folder Names · The Art of Not Asking Why](https://helpdeskheadesk.net/2022-03-13/)
  (setq org-id-method 'ts)
  (setq org-attach-id-to-path-function-list
        '(org-attach-id-ts-folder-format
          org-attach-id-uuid-folder-format))


  ;; Org-babel
  ;; https://stackoverflow.com/questions/22888785/is-it-possible-to-get-org-mode-to-show-breadcrumbs-in-agenda-todo-list
  ;; https://blog.ryuslash.org/archives/2012/12/19/orgagendaprefixformat
  (setq org-agenda-prefix-format '((agenda . "%-25:(sp/org/agenda/partial-breadcrumb) |")
                                   (todo . " %i %-12:c")
                                   (tags . " %i %-12:c")
                                   (search . " %i %-12:c")))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (async . t)
     (plantuml . t)
     (clojure . t)
     (awk . t)
     (dot . t)
     (emacs-lisp . t)
     (restclient . t)
     (graphql . t)
     (gnuplot . t)
     (makefile . t)
     (ocaml . t)
     (js . t)
     (org . t)
     (perl . t)
     (python . t)
     (shell . t)
     (sql . t)
     (sqlite . t)))

  ;; Open only task sub-tree on org-agdenda-goto from agenda
  ;; https://emacs.stackexchange.com/questions/17797/how-to-narrow-to-subtree-in-org-agenda-follow-mode
  (advice-add 'org-agenda-goto :after
              (lambda (&rest args)
                (org-narrow-to-subtree)))

  ;; Disable smartparens highlighting
  (with-eval-after-load 'smartparens
    (show-smartparens-global-mode -1))

  ;; https://gist.github.com/ftrain/8443721
  ;; enable visual feedback on selections
  (setq transient-mark-mode t)
  ;; default to better frame titles
  (setq frame-title-format
        (concat  "%b - emacs@" (system-name)))
  ;; default to unified diffs
  (setq diff-switches "-u")
  ;; plantuml
  (setq org-plantuml-jar-path (expand-file-name "~/bin/plantuml.jar"))

  ;; use the built-in emacs prompt for passphrase when using gpg
  (setf epa-pinentry-mode 'loopback)

  ;; setup jest (test tool)
  (dolist (major-mode '(typescript-mode js2-mode typescript-tsx-mode))
    (spacemacs/set-leader-keys-for-major-mode major-mode
      "tp" 'jest-test-run-all-tests
      "ta" 'jest-test-rerun-test
      "tn" 'jest-test-run
      "tt" 'jest-test-run-at-point)
    (spacemacs/declare-prefix-for-mode major-mode "mt" "test"))
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . typescript-tsx-mode))

  (setq open-junk-file-format "~/.tmp/%Y/%m/%d-%H%M%S.")

  ;; Add vale to the flycheck checkers
  (flycheck-define-checker vale
    "A checker for prose"
    :command ("vale" "--output" "line"
              source)
    :standard-input nil
    :error-patterns
    ((error line-start (file-name) ":" line ":" column ":" (id (one-or-more (not (any ":")))) ":" (message) line-end))
    :modes (markdown-mode org-mode text-mode)
    )
  (add-to-list 'flycheck-checkers 'vale 'append)

  )

;; [Send region to shell in another buffer - Emacs Stack Exchange](https://emacs.stackexchange.com/questions/37887/send-region-to-shell-in-another-buffer)
(defun tws-region-to-process (arg beg end)
  "Send the current region to a process buffer.
  The first time it's called, will prompt for the buffer to
  send to. Subsequent calls send to the same buffer, unless a
  prefix argument is used (C-u), or the buffer no longer has an
  active process."
  (interactive "P\nr")
  (if (or arg ;; user asks for selection
          (not (boundp 'tws-process-target)) ;; target not set
          ;; or target is not set to an active process:
          (not (process-live-p (get-buffer-process
                                tws-process-target)))) 
      (setq-local tws-process-target
                  (completing-read
                   "Process: "
                   (seq-map (lambda (el) (buffer-name (process-buffer el)))
                            (process-list)))))
  ;; [Emacs Shell mode: how to send region to shell? - Stack Overflow](https://stackoverflow.com/questions/6286579/emacs-shell-mode-how-to-send-region-to-shell)
  ;; (with-current-buffer tws-process-target
  ;;   (goto-char (process-mark proc))
  ;;   (insert command)
  ;;   (move-marker (process-mark proc) (point))
  ;;   )
  (message "target %s beg %s end %s" tws-process-target beg end)
  (process-send-string tws-process-target (format "%s\n"(buffer-substring beg end)))
  )

(defun sp/auth-info-host-user (host)
  "Find user for the host"
  (plist-get (car (auth-source-search :max 1 :host host :require '(:user))) :user))

(defun sp/auth-info-host-password (host)
  "Find password for the host"
  (auth-info-password (car (auth-source-search :max 1 :host host :require '(:secret)))))


(defun sp/workflows/mark-git-branch-as-done (main-branch)
  ;; depends on magit
  (interactive (list (read-string "Main branch: " "main")))

  (let ((branch-to-delete (magit-get-current-branch)))
    (magit-branch-checkout main-branch)
    (call-interactively 'magit-branch-delete branch-to-delete)
    (call-interactively 'magit-pull))
  )

(defun config-visuals ()
  ;; https://stackoverflow.com/questions/7251784/how-do-i-adjust-the-left-margin-in-emacs-nox
  (add-hook 'window-configuration-change-hook
            (lambda ()
              (set-window-margins nil 2 2)))

  (spacemacs/toggle-highlight-current-line-globally-off)
  (add-hook 'semantic-mode-hook 'sp/fight-stickyfunc)

  ;; [DarthFennec/highlight-indent-guides: Emacs minor mode to highlight indentation](https://github.com/DarthFennec/highlight-indent-guides)
  ;; (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  (require 'highlight-indent-guides)
  (setq highlight-indent-guides-method 'column
        highlight-indent-guides-responsive nil)

  (set-face-attribute 'highlight-indent-guides-odd-face nil
                      :foreground "gray45"
                      :weight 'light
                      :height 10)

  (set-face-attribute 'highlight-indent-guides-even-face nil
                      :foreground "gray80"
                      :weight 'light
                      :height 10)

  ;; it eats the indentation
  ;; (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)

  (set-face-attribute 'line-number-current-line nil
                      ;; disable custom weight and height as it introduces a weird-looking effect
                      ;; when running GUI emacs.
                      ;; :weight 'bold
                      ;; :height 120
                      )

  ;; (unless (display-graphic-p)
  ;;   (set-background-color "ivory"))
  )

;; copied from https://github.com/adamseyfarth/dotfiles/blob/70cd5f7d6961097926142af1e8c6c33b20eedfa2/spacemacs/.spacemacs#L344
(defun sp/fight-stickyfunc ()
  "Do whatever it takes to disable semantic-stickyfunc-mode"
  (with-eval-after-load 'semantic
    (setq-default semantic-default-submodes
                  (remove 'global-semantic-stickyfunc-mode
                          semantic-default-submodes))
    (spacemacs/toggle-semantic-stickyfunc-globally-off)))

(defun sp/deft/pick-dir ()
  "Select directories from a list"
  (interactive)
  (setq deft-directory 
        (ido-completing-read "Select directory: " sp/deft/dir-list))
  (deft-refresh))

(defun sp/path/parent-dir (dir)
  (file-name-directory (directory-file-name dir)))

(defun sp/tox/find-tox-dirs-in-project (project-root-dir)

  (defun -find-toxenv-bin-dirs (root)
    (projectile-files-via-ext-command
     root
     (format "find %s -type d -name 'bin' -path '*/.tox/*/bin' -print0" root)))

  (-map (lambda (file) (sp/path/parent-dir (sp/path/parent-dir file)))
        (-find-toxenv-bin-dirs project-root-dir)))

(defun sp/tox/activate-tox-env-lsp ()
  (interactive)
  (call-interactively 'sp/tox/activate-current-project-tox-env)
  (call-interactively 'lsp-workspace-restart)
  )

(defun sp/poetry/activate-env-lsp ()
  (interactive)

  (call-interactively 'poetry-venv-workon)
  (let ((python-exe (format "%s/bin/python" (poetry-get-virtualenv))))
    ;; (pytest.el) 'pytest-global-name', default value is py.test and it's used like
    ;; executable in compilation mode. That approach doesn't when pytest is
    ;; not installed globally and we need to use one from the virtual
    ;; environment.
    ;; We set this custom variable to run pytest with the venv python
    ;; interpreter.
    (message "Activated python - %s" python-exe)
    (setq lsp-pyright-venv-path (poetry-get-virtualenv))
    (message "LPS pyright venv path: %s" lsp-pyright-venv-path)
    (setq pytest-global-name (format "%s --module -m pytest" python-exe))
    (pythonic-activate python-exe)
    (setq lsp-python-ms-python-executable python-exe)
    ;; support for python.el.gz
    (setq python-shell-process-environment
          (list
           (format "PATH=%s" (mapconcat
                              'identity
                              (reverse
                               (cons (getenv "PATH")
                                     (list (format "%s/bin" lsp-pyright-venv-path))))
                              ":"))
           (format "VIRTUAL_ENV=%s" lsp-pyright-venv-path)))
    (message "python shell process env: %s" python-shell-process-environment)

    (call-interactively 'lsp-workspace-restart)
    )
  )

(defun sp/python/activate-current-project-venv ()
  (interactive)
  (progn
    (call-interactively 'pyvenv-activate)
    (message "Activated %s" python-shell-virtualenv-root)
    (venv-set-location (file-name-directory (directory-file-name python-shell-virtualenv-root)))
    (venv-workon)
    (let ((python-exe (format "%s/bin/python3" python-shell-virtualenv-root)))
      (message python-exe)
      ;; (pytest.el) 'pytest-global-name', default value is py.test and it's used like
      ;; executable in compilation mode. That approach doesn't when pytest is
      ;; not installed globally and we need to use one from the virtual
      ;; environment.
      ;; We set this custom variable to run pytest with the venv python
      ;; interpreter.
      (setq pytest-global-name (format "%s -m pytest" python-exe))
      (pythonic-activate python-exe)
      (setq lsp-python-ms-python-executable python-exe)
      )
    (add-to-list 'python-shell-extra-pythonpaths (projectile-project-root))
    (add-to-list 'python-shell-extra-pythonpaths (format "%s/src" (projectile-project-root)))
    (lsp-restart-workspace)
    )
  )


(defun sp/tox/activate-current-project-tox-env ()
  (interactive)
  (let* (
         (venv-dirs (sp/tox/find-tox-dirs-in-project (projectile-project-root)))
         (venv-dirs-length (length venv-dirs)))
    (progn
      (venv-set-location
       (if (> venv-dirs-length 1)
           (helm-comp-read "Choose tox directory to workon" venv-dirs)
         (if (= venv-dirs-length 0)
             (error "The project doesn't have created tox virtual environments.")
           (car venv-dirs))))
      (venv-workon)
      (let ((python-exe (format "%s/%s/bin/python3" venv-location venv-current-name)))
        ;; (pytest.el) 'pytest-global-name', default value is py.test and it's used like
        ;; executable in compilation mode. That approach doesn't when pytest is
        ;; not installed globally and we need to use one from the virtual
        ;; environment.
        ;; We set this custom variable to run pytest with the venv python
        ;; interpreter.
        (setq pytest-global-name (format "%s -m pytest" python-exe))
        (pythonic-activate python-exe)
        (setq lsp-python-ms-python-executable python-exe)
        )
      (add-to-list 'python-shell-extra-pythonpaths (projectile-project-root))
      (add-to-list 'python-shell-extra-pythonpaths (format "%s/src" (projectile-project-root))))))

(defun sp/org-insert-clipboard-image ()
  (interactive)
  ;; Insert image from clipboard in the org-mode headline.
  ;; use org-id.el to get or craete ID property.
  ;; the function uses pngpaste for OSX
  (let* (
         (caption (read-from-minibuffer "Image caption: "))
         (fname (read-from-minibuffer "Image fname (without ext): "))
         (-headline-id (org-id-get nil 'create))
         (imagedir (concat "./data/" -headline-id))
         (file (concat imagedir "/" fname ".png")))
    (mkdir (concat "data/"-headline-id) default-directory)
    (if (eq system-type 'darwin)
        ;; osx
        (shell-command (concat "pngpaste " file))
      ;; linux
      (sp/write-binary file (x-get-selection-internal 'PRIMARY 'image/png))
      )

    (insert (concat "#+CAPTION: " caption "\n#+ATTR_ORG: :width 500\n[[" file "]]"))
    )
  (org-display-inline-images)
  )

(defun sp/org/add-note-to-last-clocked ()
  "Add note to the currently clocked-in entry, or to the most recently clocked one"
  (interactive)
  (org-with-point-at (org-clock-goto 'SELECT)
    (org-add-log-setup 'note)
    )
  )


(defun sp/org/attach (fname)
  (format "%s/%s" (org-attach-dir-get-create) fname))

(defun sp/org/agenda/partial-breadcrumb ()
  (let* (
         (path (org-get-outline-path))
         (final_path (org-format-outline-path (last path) nil nil "|"))
         (min_length (min 25 (length final_path))))
    (format "[%s]"(substring final_path (- min_length) nil))
    )
  )

(defun sp/write-binary (file binary-data)
  (with-temp-buffer
    (toggle-enable-multibyte-characters)
    (set-buffer-file-coding-system 'raw-text)
    (seq-doseq (char binary-data)
      (insert char))
    (write-region nil nil file)))

(defun sp/decode-jwt (start end)
  (interactive "r")
  (let* ((selected (buffer-substring start end))
         (cmd (format "pyjwt decode --no-verify '%s'" selected))
         (output (shell-command-to-string cmd)))
    (kill-new output)))

(defun sp/insert-fortune-cookie ()
  (interactive)
  (when (executable-find "fortune")
    (shell-command "fortune -ec" t)))

(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(blink-cursor-mode nil)
   '(column-number-mode t)
   '(display-line-numbers-type 'visual)
   '(global-display-line-numbers-mode t)
   '(gptel-default-mode 'org-mode)
   '(helm-buffer-max-length 70)
   '(helm-icons-provider 'nerd-icons)
   '(jest-test-command-string
     " yarn run jest --testRegex \".*/.*\\.ts\" --coverage=false %s %s --testPathPattern %s")
   '(lsp-pyright-multi-root nil t)
   '(org-agenda-files '("~/gsync-docs/today.org"))
   '(package-selected-packages
     '(ac-ispell ace-jump-helm-line ace-link ace-window afternoon-theme
                 aggressive-indent alect-themes all-the-icons-dired
                 all-the-icons-nerd-fonts ample-theme ample-zen-theme annalist
                 ansible ansible-doc anti-zenburn-theme apropospriate-theme
                 atomic-chrome auto-compile auto-dictionary auto-yasnippet
                 autothemer avk-emacs-themes badwolf-theme
                 birds-of-paradise-plus-theme blacken bmx-mode brutalist-theme
                 bubbleberry-theme bui busybee-theme catppuccin-theme
                 centered-cursor-mode cfrs cherry-blossom-theme chocolate-theme
                 cider cider-eval-sexp-fu clean-aindent-mode clojure-mode
                 clojure-snippets clues-theme code-cells
                 color-theme-sanityinc-solarized color-theme-sanityinc-tomorrow
                 column-enforce-mode company company-anaconda company-ansible
                 company-lua company-nixos-options company-posframe
                 company-quickhelp company-restclient company-terraform
                 company-web counsel counsel-gtags csv-mode cyberpunk-theme
                 cython-mode dakrone-light-theme dakrone-theme dap-mode
                 darkmine-theme darkokai-theme darktooth-theme dash-at-point deft
                 denote devdocs diminish dired-quick-sort direnv django-theme
                 docker doom-modeline dotenv-mode dracula-theme
                 drag-stuff dumb-jump easy-hugo eclipse-theme editorconfig
                 ef-themes eink-theme elfeed-goodies elfeed-org elfeed-web
                 elisp-def elisp-refs elisp-slime-nav emmet-mode emr esh-help
                 eshell-prompt-extras eshell-z espresso-theme evenok evil-anzu
                 evil-args evil-cleverparens evil-collection evil-easymotion
                 evil-escape evil-evilified-state evil-exchange evil-goggles
                 evil-iedit-state evil-indent-plus evil-lion evil-lisp-state
                 evil-matchit evil-nerd-commenter evil-numbers evil-org
                 evil-surround evil-textobj-line evil-tutor evil-unimpaired
                 evil-visual-mark-mode evil-visualstar exotica-theme expand-region
                 eyebrowse eziam-themes farmhouse-themes flatland-theme
                 flatui-theme flexoki-themes flucui-themes flx-ido flycheck-elsa
                 flycheck-package flycheck-pos-tip flymd flyspell-correct-helm
                 fuzzy fzf gandalf-theme ggtags gh-md git-commit git-link
                 git-messenger git-modes git-timemachine github-dark-vscode-theme
                 github-modern-theme github-theme gitignore-templates
                 gmail-message-mode gnuplot golden-ratio google-translate
                 gotham-theme gptel grandshell-theme graphviz-dot-mode
                 groovy-imports groovy-mode gruber-darker-theme gruvbox-theme
                 halloweenie-theme hc-zenburn-theme helm helm-ag helm-c-yasnippet
                 helm-cider helm-company helm-core helm-css-scss helm-dash
                 helm-descbinds helm-git-grep helm-icons helm-ls-git helm-lsp
                 helm-make helm-mode-manager helm-nixos-options helm-org
                 helm-org-rifle helm-projectile helm-purpose helm-pydoc helm-swoop
                 helm-themes helm-xref helpful hemisu-theme heroku-theme
                 hide-comnt highlight-indent-guides highlight-numbers
                 highlight-parentheses hl-todo holy-mode humanoid-themes
                 hungry-delete hybrid-mode igist impatient-mode indent-guide
                 inkpot-theme intellij-theme iosevka-theme ir-black-theme ivy
                 jazz-theme jbeans-theme jest-test-mode jinja2-mode js-doc
                 js2-refactor json-mode json-navigator json-reformat kaolin-themes
                 kkp lab-themes launchctl light-soap-theme live-py-mode livid-mode
                 lorem-ipsum lsp-docker lsp-java lsp-mode lsp-origami lsp-pyright
                 lsp-python-ms lsp-treemacs lsp-ui lua-mode lush-theme macrostep
                 madhat2r-theme magit magit-section majapahit-themes markdown-mode
                 markdown-toc material-theme maven-test-mode mermaid-mode
                 minimal-theme mmm-mode modus-themes moe-theme molokai-theme
                 monochrome-theme monokai-alt-theme monokai-pro-theme
                 monokai-theme monotropic-theme multi-line multi-term multi-vterm
                 multi-web-mode mustang-theme mvn nameless nano-theme
                 naquadah-theme naysayer-theme neotree nerd-icons-dired nix-mode
                 noctilux-theme nodejs-repl nose notink-theme npm-mode ob-async
                 ob-graphql ob-http ob-restclient obsidian-theme occidental-theme
                 oldlace-theme omtose-phellack-theme omtose-phellack-themes
                 open-junk-file org-ai org-cliplink org-contrib org-download
                 org-mime org-pomodoro org-present org-projectile org-rich-yank
                 org-superstar organic-green-theme orgit osx-clipboard
                 osx-dictionary osx-trash overseer ox-twbs paper-theme paradox
                 parchment-theme parseedn password-generator pbcopy pcre2el
                 persp-mode pfuture phoenix-dark-mono-theme
                 phoenix-dark-pink-theme pipenv plan9-theme planet-theme
                 plantuml-mode poetry powershell powerthesaurus prettier-js
                 professional-theme projectile protobuf-mode pug-mode
                 pumpkin-spice-theme purple-haze-theme py-isort pydoc pyenv-mode
                 pylookup pytest quasi-monochrome-theme quickrun railscasts-theme
                 rainbow-delimiters rebecca-theme reformatter restart-emacs
                 restclient restclient-helm reveal-in-osx-finder reverse-theme
                 rjsx-mode robot-framework robot-mode ron-mode rustic sass-mode
                 scss-mode sesman seti-theme sexy-monochrome-theme shell-pop
                 shrink-path slack slim-mode smartparens smeargle smyx-theme
                 soft-charcoal-theme soft-morning-theme soft-stone-theme
                 solarized-theme soothe-theme space-doc spacegray-theme
                 spaceline-all-the-icons spacemacs-purpose-popwin
                 spacemacs-whitespace-cleanup spacious-padding sphinx-doc
                 sql-indent sticky-scroll-mode stillness-mode string-edit-at-point
                 string-inflection subatomic-theme subatomic256-theme
                 sublime-themes sunny-day-theme swiper symbol-overlay symon
                 tagedit tango-2-theme tango-plus-theme tangotango-theme tao-theme
                 term-cursor terminal-here tide toc-org toml-mode tommyh-theme
                 tomorrow-night-deepblue-theme toxi-theme transient tree-sitter
                 tree-sitter-langs treemacs treemacs-nerd-icons
                 twilight-anti-bright-theme twilight-bright-theme twilight-theme
                 typescript-mode ujelly-theme underwater-theme undo-tree uuidgen
                 vi-tilde-fringe vim-powerline virtualenvwrapper vmd-mode
                 volatile-highlights vs-light-theme vscdark-theme
                 vscode-dark-plus-theme vterm web-beautify web-mode wfnames
                 which-key white-sand-theme winum with-editor writegood-mode
                 writeroom-mode ws-butler yaml-mode yapfify yasnippet-snippets
                 zen-and-art-theme zenburn-theme))
   '(pytest-cmd-flags "-vv -x -s --doctest-modules")
   '(safe-local-variable-values
     '((eval let ((project-directory (car (dir-locals-find-file default-directory))))
             (setq lsp-clients-typescript-server-args
                   `("--tsserver-path" ".yarn/sdks/typescript/bin/tsserver"
                     "--stdio")))
       (eval let
             ((project-directory (car (dir-locals-find-file default-directory))))
             (setq lsp-clients-typescript-server-args
                   `("--tsserver-path"
                     ,(concat project-directory
                              "../../.yarn/sdks/typescript/bin/tsserver")
                     "--stdio")))
       (eval let
             ((project-directory (car (dir-locals-find-file default-directory))))
             (setq lsp-clients-typescript-server-args
                   `("--tsserver-path"
                     ,(concat project-directory
                              ".yarn/sdks/typescript/bin/tsserver")
                     "--stdio")))
       (hcl-indent-level . 2) (evil-shift-width . 2)
       (eval setq lsp-java-java-path
             (format "%s/%s" (getenv "JAVA_HOME") "/bin/java")
             lsp-java-import-gradle-java-home
             (format "%s/%s" (getenv "JAVA_HOME") "/bin/java")
             lsp-java-import-gradle-enabled t lsp-java-configuration-runtimes
             '[(:name "JavaSE-17" :path (getenv "JAVA_HOME") :default t)])
       (org-image-actual-width) (javascript-backend . lsp)))
   '(shell-file-name "/run/current-system/sw/bin/bash")
   '(show-paren-mode nil)
   '(tool-bar-mode nil))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(default ((t (:background nil))))
   '(counsel-outline-1 ((t (:inherit org-level-1 :family "Futura"))))
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-title ((t (:inherit default :weight bold :font "Lucida Grande" :height 1.5 :underline nil))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-level-1 ((t (:inherit default :weight bold :font "Lucida Grande" :height 1.75))))
   '(org-level-2 ((t (:inherit default :weight bold :font "Lucida Grande" :height 1.5))))
   '(org-level-3 ((t (:inherit default :weight bold :font "Lucida Grande" :height 1.25))))
   '(org-level-4 ((t (:inherit default :weight bold :font "Lucida Grande" :height 1.1))))
   '(org-level-5 ((t (:inherit default :weight bold :font "Lucida Grande"))))
   '(org-level-6 ((t (:inherit default :weight bold :font "Lucida Grande"))))
   '(org-level-7 ((t (:inherit default :weight bold :font "Lucida Grande"))))
   '(org-level-8 ((t (:inherit default :weight bold :font "Lucida Grande"))))
   '(org-link ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))))
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch))))))
  )
