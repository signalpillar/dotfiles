;; Configuration layers
;; --------------------

(defun dotspacemacs/layers ()
  (setq-default

   ;; If non-nil then Spacelpa repository is the primary source to install
   ;; a locked version of packages. If nil then Spacemacs will install the lastest
   ;; version of packages from MELPA. (default nil)
   dotspacemacs-use-spacelpa nil

   dotspacemacs-auto-resume-layouts nil
   dotspacemacs-delete-orphan-packages nil
   dotspacemacs-distribution 'spacemacs

   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t

   dotspacemacs-configuration-layers

   '(
     (deft :variables deft-extensions '("org" "md" "txt"))

     {{- if eq .chezmoi.hostname "b-0309" }}
     chrome
     {{- end}}
     semantic
     pdf
     racket
     neotree
     csv
     graphviz
     (go :variables
         go-backend 'lsp
         ;; go-backend 'go-mode
         go-format-before-save t
         go-tab-width 4
       )
     (auto-completion :variables
                      auto-completion-enable-help-tooltip nil
                      auto-completion-private-snippets-directory nil
                      auto-completion-enable-snippets-in-popup nil
                      auto-completion-return-key-behavior nil
                      auto-completion-tab-key-behavior 'cycle
                      auto-completion-complete-with-key-sequence-delay 0.1
                      :disabled-for org)
     ;; It slows down the navigation in the buffer
     ;; https://github.com/turnspike/spacemacs-spaceline
     ;; (spacemacs-spaceline :location local)
     colors
     (dash :variables
           helm-dash-browser-func 'eww)
     (elm :variables
           elm-format-on-save t
           elm-sort-imports-on-save t)

     emacs-lisp
     javascript  ;; required for json support
     ;; eyebrowse
     (git :variables
          ;; tell Magit to only automatically refresh the current Magit buffer,
          ;; but not the status buffer. If you do that, then the status buffer is only
          ;; refreshed automatically if it is the current buffer.
          ;; https://magit.vc/manual/magit/Performance.html#Performance
          magit-refresh-status-buffer t
          ;; start with cursor on head section
          magit-status-initial-section nil
          ;; to see only 2-panes in the diff-window instead of 3
          magit-ediff-dwim-show-on-hunks t
          ;; to see the diff by words not whole lines
          magit-diff-refine-hunk nil)
     github
     gtags
     html
     (lsp :variables
          lsp-enable-symbol-highlighting nil
          lsp-ui-doc-enable nil
          lsp-navigation 'peek
          )
     (markdown :variables markdown-open-command "/Applications/Typora.app/Contents/MacOS/Typora")
     (dart :variables
       dart-backend 'lsp
       lsp-enable-on-type-formatting t
       lsp-dart-sdk-dir (expand-file-name "~/proj/flutter/bin/cache/dart-sdk/")
     )
     ;; nginx
     (org :variables
          ;; https://github.com/abo-abo/org-download
          org-download-method 'attach
          org-download-timestamp t
          org-enable-bootstrap-support t
          org-enable-org-journal-support t
          org-enable-hugo-support t
          org-startup-indented t
          org-journal-dir "~/Dropbox/org-mode/journal/"
          org-agenda-files (quote ("~/Dropbox/org-mode/" "~/.org-jira/"
     {{- if eq .chezmoi.hostname "b-0309" }}
          "~/Dropbox/babylon-org-mode"
     {{- end}}
          ))
          org-hide-emphasis-markers t
          ;; this is to open only the task in the follow mode in agenda (F)
          org-agenda-follow-indirect t
          org-capture-templates
          '(;; other entries
            ("j" "Journal entry" plain
             (file+datetree+prompt "~/Dropbox/org-mode/journal.org")
             "**** %?")
     {{- if eq .chezmoi.hostname "b-0309" }}
            ("i" "Interview entry" plain
             (file+datetree+prompt "~/Dropbox/babylon-org-mode/interviews.org")
             "**** TODO Interview %?        :interview:\nSCHEDULED: %t")
            ("t" "Journal todo" plain
             (file+datetree+prompt "~/Dropbox/babylon-org-mode/journal.org")
             "**** TODO %?\nSCHEDULED: %t")
            ("b" "Babylon todo" plain
             (file+datetree+prompt "~/Dropbox/babylon-org-mode/babylon.org")
             "**** TODO %?\nSCHEDULED: %t")
            ("d" "Babylon day" plain
             (file+datetree+prompt "~/Dropbox/babylon-org-mode/babylon.org")
             "%T\n%?"
             :prepend t
             :empty-lines 0
             )
     {{- end}}
            )

          org-cycle-separator-lines -2
          org-fontify-whole-heading-lines t
          org-blank-before-new-entry '(
                                       (heading . nil)
                                       (plain-list-item . nil))
          org-export-babel-evaluate nil
          org-src-preserve-indentation t
          org-todo-keywords (quote
                   ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d@/!)")
                    (sequence "WAITING(w@/!)" "REVIEW(r)"
                        "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "MERGED(m)" "MEETING(g@/!)")))
          org-todo-keyword-faces (quote
                                  (
                                   ("TODO" :foreground "red" :width bold)
                                   ("NEXT" :foreground "blue" :width bold)
                                   ("DONE" :foreground "forest green" :width bold)
                                   ("WAITING" :foreground "orange" :width bold)
                                   ("REVIEW" :foreground "orange" :width bold)
                                   ("MEETING" :foreground "orange" :width bold)
                                   ("HOLD" :foreground "magenta" :width bold)
                                   ("CANCELLED" :foreground "forest gree" :width bold)
                                   ("MERGED" :foreground "forest green" :width bold)))
          org-log-done (quote time)
          org-log-into-drawer t
          org-log-state-notes-insert-after-drawers nil
          org-hide-emphasis-markers t
          org-enable-github-support t
          org-enable-bootstrap-support t
          org-enable-reveal-js-support t
          ;; Syntax highlighting in #+BEGIN_SRC blocks
          org-src-fontify-natively t
          ;; Don't prompt before running code in org
          org-confirm-babel-evaluate nil
          )
     ;; ocaml
     osx

     dap
     (python :variables
             python-shell-interpreter "python3"
             ;; python-backend 'anaconda
             python-backend 'lsp
             python-fill-docstring-style 'pep-257-nn
             python-fill-column 88
             python-test-runner 'pytest
             python-format-on-save t
             python-formatter 'black
             python-auto-set-local-pyvenv-virtualenv 'on-project-switch
             python-indent-offset 4
             lsp-enable-snippet nil
             lsp-prefer-flymake nil
             )
     (shell :variables
            shell-default-height 48
            shell-default-position 'bottom
            shell-default-term-shell "zsh"
            shell-default-shell 'eshell
            )
     (syntax-checking :variables
                     syntax-checking-enable-by-default t)
     (theming :variables
              theming-headings-inherit-from-default 'all
              theming-headings-same-size 'all
              theming-headings-bold 'all)
     (spell-checking :variables
                     spell-checking-enable-auto-dictionary nil
                     enable-flyspell-auto-completion nil
                     spell-checking-enable-by-default nil
      )
     restclient
     (version-control :variables
                      version-control-diff-tool 'diff-hl
                      git-magit-status-fullscreen t)
     yaml)

   dotspacemacs-additional-packages `(
                                      {{- if eq .chezmoi.hostname "b-0309" }}
                                      (babylon :location local)
                                      {{- end}}
                                      direnv
                                      blacken
                                      ;; to fix the editor issue when commiting
                                      git-commit
                                      magit-delta
                                      ;; call all-the-icons-install-fonts to install the fonts on the system
                                      all-the-icons
                                      parchment-theme

                                      flycheck-mypy
                                      poetry
                                      protobuf-mode
                                      eval-sexp-fu
                                      virtualenvwrapper
                                      ob-restclient
                                      ;; allows to not block on org source-block
                                      ;; execution
                                      ob-async
                                      easy-hugo
                                      )
   dotspacemacs-excluded-packages `(
        importmagic
        org-plus-contrib
        evil-search-highlight-persist
        eval-sexp-fu
        info+
        smooth-scrolling
        rainbow-delimiters
        ;; not needed functionality
        pip-requirements
        pippel
        yasnippet-snippets

        ;; I don't really need them
        define-word
        fancy-battery

        git-gutter
        git-gutter+
        git-gutter-fringe
        git-gutter-fringe+
        )
   ) ;; setq
  )

(defun dotspacemacs/init ()
  "Initialization function.
   This function is called at the very startup of Spacemacs initialization
   before layers configuration."

  (setq-default

   ;; True if the home buffer should respond to resize events. (default t)
   dotspacemacs-startup-buffer-responsive t

   ;; exec-path-from-shell-arguments '("-l")
   dotspacemacs-elpa-https t
   ;; If non nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. (default t)
	 dotspacemacs-check-for-update nil
   dotspacemacs-editing-style 'vim
   dotspacemacs-mode-line-theme 'doom
   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil

   dotspacemacs-themes (if (display-graphic-p) '(modus-operandi parchment default paper cyberpunk  smyx zenburn) '(modus-operandi parchment))

   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache

   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5

   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1

   dotspacemacs-default-font '("Source Code Pro" :size 14)

   dotspacemacs-leader-key ","
   dotspacemacs-emacs-leader-key "M-m"
   dotspacemacs-major-mode-leader-key "SPC"
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"

   dotspacemacs-command-key ":"
   dotspacemacs-remap-Y-to-y$ t
   dotspacemacs-use-ido nil

   ;; If non-nil, `helm' will try to minimize the space it uses. (default t)
   dotspacemacs-helm-resize t
   ;; If non-nil, `helm' will try to remove duplicates in history (default nil)
   history-delete-duplicates t


   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4

   ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil

   ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t
   dotspacemacs-search-tools '("ag" "rg" "grep")

   ;; dotspacemacs-line-numbers t
   dotspacemacs-folding-method 'evil  ;; origami

   ;; Format specification for setting the frame title.
   ;; %a - the `abbreviated-file-name', or `buffer-name'
   ;; %t - `projectile-project-name'
   ;; %I - `invocation-name'
   ;; %S - `system-name'
   ;; %U - contents of $USER
   ;; %b - buffer name
   ;; %f - visited file name
   ;; %F - frame name
   ;; %s - process status
   ;; %p - percent of buffer above top of window, or Top, Bot or All
   ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
   ;; %m - mode name
   ;; %n - Narrow if appropriate
   ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
   ;; %Z - like %z, but including the end-of-line format
   ;; (default "%I@%S")
   dotspacemacs-frame-title-format "%a@%t"
   ))

(defun dotspacemacs/user-init ()
  (setq-default
   ;; Increase space between the lines
   line-spacing 5
   ;; Miscellaneous
   require-final-newline t
   x-select-enable-clipboard t

   ;; Backups
   backup-directory-alist `((".*" . ,temporary-file-directory))
   auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
   backup-by-copying t
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   make-backup-files nil

   ;; Evil
   evil-shift-round nil
   evil-want-C-i-jump nil
   ;; do not put replaced text in clipboard
   evil-kill-on-visual-paste nil

   ;; Whitespace mode
   whitespace-style '(face tabs tab-mark newline-mark)
   whitespace-display-mappings
   '((newline-mark 10 [172 10])
     (tab-mark 9 [9655 9]))

   ;; Wait 0.5seconds before automatically highlitghting
   ahs-idle-interval 0.5

   ;; Avy
   avy-all-windows 'all-frames

   ;; Flycheck
   flycheck-check-syntax-automatically '(save mode-enabled)

   ;; powerline doom theme
   doom-modeline-buffer-file-name-style 'truncate-all
   ))

(defun dotspacemacs/user-config ()
  "Configuration function.
 This function is called at the very end of Spacemacs initialization after
layers configuration."
  (direnv-mode)
  (config-visuals)

  ;; https://github.com/emacsorphanage/popwin
  (push '(compilation-mode :noselect t :position bottom) popwin:special-display-config)

  ;; (set-background-color "honeydew")

  (setq deft-directory "~/Dropbox/notes")

  (add-to-list 'spacemacs-default-jump-handlers 'dumb-jump-go)

  ;; hugo
  ;; note: tailing slash is important
  (setq easy-hugo-basedir "~/proj/signalpillar.github.io/")
  (setq easy-hugo-url "https://signalpillar.github.io")
  (setq easy-hugo-postdir "content/posts")


  ;; for any theme I wan to be able to see the borders of the windows.
  (set-frame-parameter (selected-frame) 'internal-border-width 15)

  (fset 'evil-visual-update-x-selection 'ignore)

  ;; ui
  ;; https://news.ycombinator.com/item?id=17172524
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))


  ;; Neotree
  (with-eval-after-load 'neotree
    (add-to-list 'neo-hidden-regexp-list "TAGS$")
    (add-to-list 'neo-hidden-regexp-list "__pycache__")
  )
  ;; auto-completion for python doesn't work
  ;; https://github.com/syl20bnr/spacemacs/issues/10638
  (eval-after-load "company"
    '(add-to-list 'company-backends 'company-anaconda))
  ;; Enable custom neotree theme
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  (evil-leader/set-key "of" 'neotree-find)

  (require 'helm-bookmark)
  (defun jao-toggle-selective-display ()
    (interactive)
    (set-selective-display (if selective-display nil 1)))

  (global-set-key [f3] 'jao-toggle-selective-display)
  (global-set-key [f4] 'sp/tox/activate-current-project-tox-env)
  (global-set-key [f5] 'sp/org-insert-clipboard-image)

  (setq-default
   powerline-default-separator 'alternate
   guide-key/popup-window-position :right
   )

  (set-fill-column 100)
  (global-set-key (kbd "C-=") 'zoom-frm-in)
  (global-set-key (kbd "C--") 'zoom-frm-out)
  (setq clojure-enable-fancify-symbols t)
  (setq flycheck-display-errors-function 'flycheck-display-error-messages-unless-error-list)

  ;; Miscellaneous
  (add-hook 'text-mode-hook 'auto-fill-mode)
  (add-hook 'makefile-mode-hook 'whitespace-mode)

  (add-hook 'python-mode-hook 'flycheck-mode)
  (add-hook 'python-mode-hook 'flyspell-prog-mode)
  (add-hook 'python-mode-hook 'auto-fill-mode)
  (add-hook 'python-mode-hook 'blacken-mode)

  (add-hook 'live-py-mode-hook (lambda ()
                                 (progn
                                   (setq-default live-py-version (executable-find "python"))
                                   (live-py-update-all))))

  ;; .envrc files are setting now PYTHONPATH
  ;; (advice-add 'pyenv-mode-set
  ;;             :after
  ;;             (lambda (_) (setenv "PYTHONPATH" (format "%s/src" (projectile-project-root))))
  ;;             )

  ;; Org-babel

  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (async . t)
     (awk . t)
     (dot . t)
     (emacs-lisp . t)
     (restclient . t)
     (gnuplot . t)
     (makefile . t)
     (ocaml . t)
     (org . t)
     (perl . t)
     (python . t)
     (shell . t)
     (sql . t)
     (sqlite . t)))

  ;; Open only task sub-tree on org-agdenda-goto from agenda
  ;; https://emacs.stackexchange.com/questions/17797/how-to-narrow-to-subtree-in-org-agenda-follow-mode
  (advice-add 'org-agenda-goto :after
              (lambda (&rest args)
                (org-narrow-to-subtree)))

  ;; Disable smartparens highlighting
  (with-eval-after-load 'smartparens
    (show-smartparens-global-mode -1))

  ;; https://gist.github.com/ftrain/8443721
  ;; enable visual feedback on selections
  (setq transient-mark-mode t)
  ;; default to better frame titles
  (setq frame-title-format
        (concat  "%b - emacs@" (system-name)))
  ;; default to unified diffs
  (setq diff-switches "-u")

  ;; use the built-in emacs prompt for passphrase when using gpg
  (setf epa-pinentry-mode 'loopback)

  (require 'flycheck-mypy)
  (flycheck-add-next-checker 'python-flake8 'python-mypy t)
  (setq flycheck-python-mypy-args
        '("--strict-optional" "--ignore-missing-imports"))
  (dolist (f '("GPATH" "GTAGS" "GRTAGS" ".*"))
    (add-to-list 'helm-grep-ignored-files f))
  )

(defun config-visuals ()

  (spacemacs/toggle-highlight-current-line-globally-off)
  (add-hook 'semantic-mode-hook 'sp/fight-stickyfunc)
  (setq-default highlight-indent-guides-method 'character)
  (unless (display-graphic-p)
    (set-face-background 'default "unspecified-bg" (selected-frame)))

  )

;; copied from https://github.com/adamseyfarth/dotfiles/blob/70cd5f7d6961097926142af1e8c6c33b20eedfa2/spacemacs/.spacemacs#L344
(defun sp/fight-stickyfunc ()
  "Do whatever it takes to disable semantic-stickyfunc-mode"
  (with-eval-after-load 'semantic
    (setq-default semantic-default-submodes
                  (remove 'global-semantic-stickyfunc-mode
                          semantic-default-submodes))
    (spacemacs/toggle-semantic-stickyfunc-globally-off)))

(defun sp/path/parent-dir (dir)
  (file-name-directory (directory-file-name dir)))

(defun sp/tox/find-tox-dirs-in-project (project-root-dir)

  (defun -find-toxenv-bin-dirs (root)
    (projectile-files-via-ext-command
     root
     (format "find %s -type d -name 'bin' -path '*/.tox/*/bin' -print0" root)))

  (-map (lambda (file) (sp/path/parent-dir (sp/path/parent-dir file)))
        (-find-toxenv-bin-dirs project-root-dir)))

(defun sp/tox/activate-tox-env-lsp ()
  (interactive)
  (call-interactively 'sp/tox/activate-current-project-tox-env)
  (call-interactively 'lsp-workspace-restart)
  )

(defun sp/tox/activate-current-project-tox-env ()
  (interactive)
  (let* (
         (venv-dirs (sp/tox/find-tox-dirs-in-project (projectile-project-root)))
         (venv-dirs-length (length venv-dirs)))
    (progn
      (venv-set-location
       (if (> venv-dirs-length 1)
           (helm-comp-read "Choose tox directory to workon" venv-dirs)
         (if (= venv-dirs-length 0)
             (error "The project doesn't have created tox virtual environments.")
           (car venv-dirs))))
      (venv-workon)
      (let ((python-exe (format "%s/%s/bin/python3" venv-location venv-current-name)))
        ;; (pytest.el) 'pytest-global-name', default value is py.test and it's used like
        ;; executable in compilation mode. That approach doesn't when pytest is
        ;; not installed globally and we need to use one from the virtual
        ;; environment.
        ;; We set this custom variable to run pytest with the venv python
        ;; interpreter.
        (setq pytest-global-name (format "%s -m pytest" python-exe))
        (pythonic-activate python-exe)
        (setq lsp-python-ms-python-executable python-exe)
        )
      (add-to-list 'python-shell-extra-pythonpaths (projectile-project-root))
      (add-to-list 'python-shell-extra-pythonpaths (format "%s/src" (projectile-project-root))))))

(defun sp/org-insert-clipboard-image ()
  (interactive)
  ;; Insert image from clipboard in the org-mode headline.
  ;; use org-id.el to get or craete ID property.
  ;; the function uses pngpaste
  (let* (
        (caption (read-from-minibuffer "Image caption: "))
        (fname (read-from-minibuffer "Image fname (without ext): "))
        (-headline-id (org-id-get nil 'create))
        (imagedir (concat default-directory "/data/" -headline-id))
        (file (concat imagedir "/" fname ".png")))
    (mkdir (concat "data/"-headline-id) default-directory)
    (shell-command (concat "pngpaste " file))
    (insert (concat "#+CAPTION: " caption "\n#+ATTR_ORG: :width 500\n[[" file "]]"))
    )
  (org-display-inline-images)
  )

(defun sp/decode-jwt (start end)
  (interactive "r")
  (let* ((selected (buffer-substring start end))
         (cmd (format "pyjwt decode --no-verify '%s'" selected))
         (output (shell-command-to-string cmd)))
    (kill-new output)))

{{- if eq .chezmoi.hostname "b-0309" }}
(defun djangoapp/set-cms-evars ()
  (interactive)
  (setenv "DATABASE_NAME" "monitor-cms")
  (setenv "DATABASE_HOST" "localhost")
  (setenv "DATABASE_PORT" "6603")
  (setenv "DATABASE_USER" "user")
  (setenv "DATABASE_PASSWORD" "password")
  (setenv "SECRET_KEY" "secret-key")
  (setenv "LOG_LEVEL" "INFO")
  )

{{- end}}

(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(pytest-cmd-flags "-vv -x -s"))
)
